@startuml
skinparam classAttributeIconSize 0

package "miembro" #DDDDDD {
    class Persona {
    -nombre: String
    -apellido: String
    -nroDocumento: String
    -tipoDocumento: TipoDocumento
    -ubicacion: Hogar
    -usuario: Usuario
    }

    class Miembro {
    -persona: Persona
    -area: Area

    +Double calcularHuellaCarbonoMiembroMensual(int, int)
    +Double calcularHuellaCarbonoMiembroAnual(int)
    +void cargarTrayecto(Trayecto)
    +Double impactoMiembroEnOrganizacionAnual(int)
    }

    class AgenteSectorial extends Persona {
    -sectorTerritorial: Sector

    +Double calcularHuellaCarbonoPorSectorAnual(int)
    +Double calcularHuellaCarbonoPorSectorMensual(int, int)
    }

    enum TipoDocumento {
    DNI,
    LE,
    LC
    }
}

package "organizacion" #DDDDDD {

    class Contacto {
    -mail: String
    -numeroTelefono: String
    }

    class Organizacion {
    -razonSocial: String
    -tipo: TipoOrganizacion
    -clasificacion: Clasificacion
    -sectores: [Area]
    -transformador: Transformador
    -contactos: [Contacto]
    -calculadora: CalculadoraHCActividad

    +void agregarArea(Area)
    +Double calcularHuellaCarbonoTotalAnio(int)
    +Double calcularHuellaCarbonoTotalMensual(int, int)
    +boolean tieneArea(Area)
    }

    class Area {
    -nombre: String
    -miembros: [Miembro]
    -ubicacion: EspacioDeTrabajo
    -trayectosRegistrados: [Trayecto]
    -trayectosPendientes: [Trayecto]

    +void registrarMiembro(Miembro)
    +void aceptarVinculacion(Trayecto)
    +void agregarVinculacion(Trayecto)
    +Double calcularHuellaCarbonoTotalAreaAnual(int)
    +Double calcularHuellaCarbonoTotalAreaMensual(int, int)
    +Double calcularHuellaCarbonoPromedioMiembroMensual(int, int)
    +Double calcularHuellaCarbonoPromedioMiembroAnual(int)
    +Collection<Trayecto> getTrayectosDelMiembro(Miembro)
    +boolean perteneceSector(Sector sector)
    }

    enum Clasificacion {
    MINISTERIO,
    UNIVERSIDAD,
    ESCUELA,
    ESCUELA_DEL_SECTOR_PRIMARIO,
    ESCUELA_DEL_SECTOR_SECUNDARIO
    }

    enum TipoOrganizacion {
    GUBERNAMENTAL,
    ONG,
    EMPRESA,
    INSTITUCION
    }
}

package "notificadores" #DDDDDD {

    class Notificador {
    -mailGeneral: String
    -numeroGeneral: String
    -password: String
    -emailSender: EmailSender
    -whatsappSender: WhatsappSender

    +void execute(JobExecutionContext)
    +void enviarNotificacionesPorTodosLosMedios(String, String)
    }

    class EmailSender {
    -prop: Properties
    -session: Session
    -username: String
    -password: String

    +void send(String, String, String, String)
    }

    class WhatsappSender {

    +void send(String, String, String, String)
    }
}

package "repositorios" #DDDDDD {

    class RepoOrganizaciones {
    -organizaciones: [Organizacion]
    -instance: RepoOrganizaciones

    +RepoOrganizaciones getInstance()
    +Organizacion encontrarOrganizacion(Area)
    +Collection<Contacto> listadoContactosOrganizaciones()
    +Collection<Area> listadoAreasOrganizaciones()

    }

    class RepoTransportePublico {
    -lineas: <String, [Parada]>
    -instance: RepoTransportePublico

    +RepoTransportePublico getInstance()

    }

    class RepositorioUsuarios {
    -salt: [byte]
    -loginUsuarios: <String,String>
    -instance: RepositorioUsuarios

    +RepositorioUsuarios getInstance()
    +String generarHash(String, byte[])
    +void validarContrasenia(String)
    +void agregarUsuario(String,String)
    +boolean contraseniaCoincide(String, String)
    }

    class RepoLocalidad {
    -localidades: [Localidad]
    -instance: RepoLocalidad

    +RepoLocalidad getInstance()
    }

    class Localidad {

    }
    note right: El modelo de la API est치 en su propio DC


    class RepoMedioTransporte {
    -mediosDeTransporte: [MedioDeTransporte]
    -instance: RepoMedioTransporte

    +RepoMedioTransporte getInstance()

    }

    class RepoMunicipio {
    -municipios: [Municipio]
    -instance: RepoMunicipio

    +RepoMunicipio getInstance()

    }

    class Municipio {

    }
    note right: El modelo de la API est치 en su propio DC

    class RepoProvincia {
    -provincias: [Provincia]
    -instance: RepoProvincia

    +RepoProvincia getInstance()

    }

    class Provincia {

    }
    note right: El modelo de la API est치 en su propio DC


}

package "huellaDeCarbono" #DDDDDD {

    package "CalculadoraHC" {
        class CalculadoraHCActividad {
        -tiposActividad: [TipoActividad]

        -TipoActividad obtenerTipoActividad(DatosDeLaActividad)
        +Double calcularHuellaCarbonoLogProdRes(Collection<DatosDeLaActividad>)
        +Double calcularHuellaCarbonoCombElec(DatosDeLaActividad)
        +Double calcularHCActividadAnual(Collection<DatosDeLaActividad>, int)
        +Double calcularHCActividadMensual(Collection<DatosDeLaActividad>, int, int)
        }

        class TipoActividad {
        -nombre: String
        -fe: Double
        -tipoUnidad: String
        }
    }

    package "espacio" {
        abstract class Espacio {
        -latitud: Double
        -longitud: Double
        -provincia: String
        -direccion: String
        -numero: int
        -codigoPostal: int
        -barrio: String
        -municipio: String
        -localidad: String
        }

        class Hogar extends Espacio {
        -piso: int
        -departamento: String
        -tipoHogar: TipoHogar
        }

        class Parada extends Espacio {

        }

        class EspacioDeTrabajo extends Espacio {
        -piso: int
        -unidad: String
        }

        enum TipoHogar {
        CASA,
        DEPARTAMENTO,
        RESIDENCIA
        }
    }

    package "medioDeTransporte" {

        abstract class MedioDeTransporte {
        -factorEmision: Double

        +boolean puedoSerCompartido()
        }

        class VehiculoParticular extends MedioDeTransporte {
        -tipoVehiculo: TipoVehiculo
        -tipoCombustible: TipoCombustible
        }

        enum TipoCombustible {
        GNC,
        NAFTA,
        ELECTRICO,
        GASOIL
        }

        enum TipoVehiculo {
        AUTO,
        MOTO,
        CAMIONETA
        }

        class TransporteNoMotorizado extends MedioDeTransporte {
        -tipoNoMotorizado: TipoNoMotorizado
        }

        enum TipoNoMotorizado {
        BICI,
        A_PIE,
        OTROS
        }

        class ServicioContratado extends MedioDeTransporte {
        -tipoServicioContratado: TipoServicioContratado
        }

        enum TipoServicioContratado {
        TAXI,
        REMIS
        }

        class TransportePublico extends MedioDeTransporte {
        -nombre: String
        -tipoTransportePublico: TipoTransportePublico
        }

        enum TipoTransportePublico {
        TREN,
        SUBTE,
        COLECTIVO
        }

        class CamionDeCarga extends MedioDeTransporte {

        }

        class UtilitarioLiviano extends MedioDeTransporte {

        }
    }

    package "trayecto" {

        class Trayecto {
        -partida: Espacio
        -llegada: Espacio
        -tramos: [Tramo]
        -fechaInicio: LocalDate
        -fechaFin: LocalDate
        -diasUtilizados: int

        +Double calcularHuellaCarbonoTotalTrayecto()
        +Double calcularHCTrayectoSemanal()
        +Double calcularHCTrayectoMensual()
        +boolean perteneceMiembro(Miembro)
        +boolean perteneceMes(int, int)
        +boolean perteneceAnio(int)
        +Double peso()
        }

        class Tramo {
        -partida: Espacio
        -llegada: Espacio
        -transporte: MedioDeTransporte
        -miembros: [Miembro]

        +Double calcularDistancia()
        +void agregarMiembro(Miembro)
        +Double calcularHuellaCarbonoTramo()
        +boolean tieneMiembro(Miembro)
        +Double getPeriodicidad()
        }

        class ManejadorTrayectos {
        -instance: ManejadorTrayectos

        +Double calcularHCMensual(Collection<Trayecto>, int, int)
        +Double calcularHCAnual(Collection<Trayecto>, int)
        }

        class ServicioApiDistancia {

        }
        note right: El modelo de la API est치 en su propio DC

    }
}

package "excel_ETL" #DDDDDD {

    class DatosDeLaActividad {
    -actividad:String
    -tipoDeConsumo:String
    -consumo:Consumo
    -periodoDeImputacion:String

    +boolean perteneceAnio(int)
    +boolean perteneceMesAnio(int, int)
    +boolean perteneceSoloAnio(int)
    }

    class Consumo {
    -valor: Double
    -periodicidad:String
    }

    class Transformador {
    -datosActividad: [DatosDeLaActividad]

    +void cargarDatos(String)
    }
}

package "roles" #DDDDDD {

    abstract Usuario {
    -usuario: String
    +miValidador : ValidadorDeMetricas
    }


    class Administrador extends Usuario {
    -calculadoraHCActividad: CalculadoraHCActividad

      +void setFactorEmisionFuel(Double)
      +void setFactorEmisionDiesel(Double)
      +void setFactorEmisionGas(Double)
      +void setFactorEmisionNafta(Double)
      +void setFactorEmisionLogProdRes(Double)
      +void setFactorEmisionCarbon(Double)
      +void setFactorEmisionCarbonLenia(Double)
      +void setFactorEmisionElectricidad(Double)
      +void setFactorEmisionKerosene(Double)
      +void setFactorEmisionLenia(Double)
      +void setFactorEmisionCombConsumidoGasoil(Double)
      +void setFactorEmisionCombConsumidoGNC(Double)
      +void setFactorEmisionCombConsumidoNafta(Double)
    }
}

Miembro ..> Trayecto
Miembro --> Persona
Miembro --> Area

Area --> EspacioDeTrabajo
Area --> "*" Miembro
Area --> "2*" Trayecto
Area ..> ManejadorTrayectos : <<instance>>

Organizacion --> "*" Area
Organizacion --> TipoOrganizacion
Organizacion --> Clasificacion
Organizacion --> Transformador
Organizacion --> "*" Contacto
Organizacion --> CalculadoraHCActividad

Trayecto --> "2" Espacio
Trayecto --> "*" Tramo

DatosDeLaActividad --> Consumo

Transformador --> "*" DatosDeLaActividad

Tramo --> "2" Espacio
Tramo --> MedioDeTransporte
Tramo --> "*" Miembro
Tramo ..> ServicioApiDistancia

Hogar --> TipoHogar

VehiculoParticular --> TipoVehiculo
VehiculoParticular --> TipoCombustible

ServicioContratado --> TipoServicioContratado

TransportePublico --> TipoTransportePublico

TransporteNoMotorizado --> TipoNoMotorizado

RepositorioUsuarios --> Usuario
RepositorioUsuarios --> RepositorioUsuarios

RepoTransportePublico --> "*" Parada
RepoTransportePublico --> RepoTransportePublico

RepoOrganizaciones --> RepoOrganizaciones
RepoOrganizaciones --> "*" Organizacion

RepoLocalidad --> RepoLocalidad
RepoLocalidad --> "*" Localidad

RepoMedioTransporte --> RepoMedioTransporte
RepoMedioTransporte --> "*" MedioDeTransporte

RepoMunicipio --> RepoMunicipio
RepoMunicipio --> "*" Municipio

RepoProvincia --> RepoProvincia
RepoProvincia --> "*" Provincia

ManejadorTrayectos --> ManejadorTrayectos

Persona --> Hogar
Persona --> Usuario
Persona --> TipoDocumento

Administrador --> CalculadoraHCActividad

CalculadoraHCActividad --> "*" TipoActividad

Notificador --> WhatsappSender
Notificador --> EmailSender
Notificador ..> RepoOrganizaciones

AgenteSectorial ..> RepoOrganizaciones

@enduml